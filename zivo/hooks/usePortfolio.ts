// src/hooks/usePortfolio.ts
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import {
  getPortfolios,
  createPortfolio,
  updatePortfolio,
  deletePortfolio,
} from "@/lib/portfolio.service";

// ðŸ§© Portfolio item tipi (tekrar tanÄ±mlÄ±yoruz Ã§Ã¼nkÃ¼ ayrÄ± dosyadayÄ±z)
interface PortfolioItem {
  id: string;
  businessId: string;
  imageUrl: string;
  description: string;
  uploadedAt: string;
}

// ðŸ”¹ PortfolyolarÄ± Ã§ekme hook'u
export const useGetPortfolios = (businessId: string) =>
  useQuery<PortfolioItem[]>({
    queryKey: ["portfolios", businessId],
    queryFn: () => getPortfolios(businessId),
    enabled: !!businessId, // businessId varsa Ã§alÄ±ÅŸÄ±r
  });

// ðŸ”¹ Yeni portfolio oluÅŸturma hook'u
export const useCreatePortfolio = () => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: createPortfolio,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["portfolios"] });
    },
  });
};

// ðŸ”¹ Portfolio gÃ¼ncelleme hook'u
export const useUpdatePortfolio = () => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({ id, data }: { id: string; data: { description: string } }) =>
      updatePortfolio(id, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["portfolios"] });
    },
  });
};

// ðŸ”¹ Portfolio silme hook'u
export const useDeletePortfolio = () => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (id: string) => deletePortfolio(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["portfolios"] });
    },
  });
};
